---
import { type CollectionEntry, getCollection } from 'astro:content';
import type { GetStaticPaths, Page } from 'astro';

import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';

import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Pagination from '../../components/Pagination.astro';

export const getStaticPaths : GetStaticPaths = async ({ paginate }) => {
    const posts = (await getCollection('blog'))
        .filter(post => !post.data.draft)
        .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
    );
    
    return paginate(posts, { pageSize: 9 });
};

type Props = {
  page: Page<CollectionEntry<'blog'>>;
};

const page = Astro.props.page;
---

<html lang="en">
<BaseHead title={`${SITE_TITLE} | Blog`} description={SITE_DESCRIPTION} />
<body>
	<Header />
    <main>
        <div class="blog-posts">
            {page.data.map(post => (
				<a href={`/blog/${post.id}/`}>
					<article class="blog-post">
						<div class="content-column">
							<h1 transition:name={post.id}>{post.data.title}</h1>
                            <span class="pub-date" transition:name={post.id + "-pubdate"}><FormattedDate date={post.data.pubDate} /></span>
                            <p class="post-description">{post.data.description}</p>
						</div>
					</article>
				</a>
            ))}
        </div>
        <Pagination page={page} />

    </main>
	<Footer />
</body>
</html>

<style>
.blog-post {
    background-color: #fff;
    transition: all 0.3s ease;
    display: flex;
    margin-bottom: 20px;
}
.content-column {
    padding: 10px;
}
.content-column h2 {
    display: inline;
}
.pub-date {
    color: #929191a9;
    font-size: small;
}
.post-description {
    font-size: 85%;
    font-weight: 500;
    color: rgb(var(--gray-light));
}
</style>