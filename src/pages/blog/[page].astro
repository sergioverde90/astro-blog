---
import { type CollectionEntry, getCollection } from 'astro:content';
import type { GetStaticPaths, Page } from 'astro';

import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';

import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Pagination from '../../components/Pagination.astro';

export const getStaticPaths : GetStaticPaths = async ({ paginate }) => {
    const posts = (await getCollection('blog')).sort(
	    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
    );
    
    return paginate(posts, { pageSize: 9 });
};

type Props = {
  page: Page<CollectionEntry<'blog'>>;
};

const page = Astro.props.page;
---

<html lang="en">
<BaseHead title={`${SITE_TITLE} | Blog`} description={SITE_DESCRIPTION} />
<body>
	<Header />
    <main>
        <div class="blog-posts">
            {page.data.map(post => (
				<a href={`/blog/${post.id}/`}>
					<article class="blog-post">
						<div class="image-column">
							<img transition:name={post.id} src={post.data.heroImage} alt="" />
						</div>
						<div class="content-column">
							<h2>{post.data.title}</h2>
                            <p class="post-description">{post.data.description}</p>
							<span class="pub-date"><FormattedDate date={post.data.pubDate} /></span>
						</div>
					</article>
				</a>
            ))}
        </div>
        <Pagination page={page} />

    </main>
	<Footer />
</body>
</html>

<style>
.blog-posts {
    /* enable grid */
    display: grid;
    /* indicate the number of columns:
        - auto-fill: fill the container with as many columns as possible
        - minmax: set the minimum and maximum width of each column
        If there is enough space, the columns will be n px wide. 
        If there is not enough space, the columns will shrink to fit the container.
    */
    grid-template-columns: repeat(
        auto-fill, 
        minmax(220px, 1fr)
    );
    /* when rows are auto-generated, set the height of each row */
    /* grid gap */
    gap: 15px;
}
.blog-post {
    background-color: rgb(248, 248, 248);
    border-radius: 8px;
    box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.205);
    transition: all 0.3s ease;
}
.blog-post:hover {
    transform: scale(101%);
    box-shadow: 0 6px 12px rgba(132, 132, 132, 0.412);
}
.image-column img {
    border-radius: 4px 4px 0px 0px;
}
.content-column {
    margin: 0;
    padding: 0;
}
.content-column h2 {
    font-size: 100%;
    font-weight: bold;
    padding-left: 15px;
    padding-right: 15px;
    max-height: 35px;
    min-height: 35px;
    color: var(--main-color);
}
.post-description {
    font-size: 85%;
    font-weight: 500;
    padding-left: 15px;
    padding-right: 15px;
    padding-top: 0px;
    max-height: 100px;
    min-height: 100px;
    color: rgb(106, 118, 143);
}
.pub-date {
    left: 0;
    margin-inline-start: 0px;
    color: #929191;
    bottom: 15px;
    padding-left: 15px;
    padding-top: 15px;
    font-size: small;
}
</style>